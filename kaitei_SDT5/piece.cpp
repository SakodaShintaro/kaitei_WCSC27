#include"piece.hpp"
#include<array>

std::unordered_map<int, std::string> PieceToStr = {
    { PAWN,   "ï‡" },
    { LANCE,  "çÅ" },
    { KNIGHT, "åj" },
    { SILVER, "ã‚" },
    { GOLD,   "ã‡" },
    { BISHOP, "äp" },
    { ROOK,   "îÚ" },
    { BLACK_PAWN,    "êÊéËï‡" },
    { BLACK_LANCE,   "êÊéËçÅ" },
    { BLACK_KNIGHT,  "êÊéËåj" },
    { BLACK_SILVER,  "êÊéËã‚" },
    { BLACK_GOLD,    "êÊéËã‡" },
    { BLACK_BISHOP,  "êÊéËäp" },
    { BLACK_ROOK,    "êÊéËîÚé‘" },
    { BLACK_KING,    "êÊéËã " },
    { BLACK_PAWN_PROMOTE,   "êÊéËÇ∆" },
    { BLACK_LANCE_PROMOTE,  "êÊéËê¨çÅ" },
    { BLACK_KNIGHT_PROMOTE, "êÊéËê¨åj" },
    { BLACK_SILVER_PROMOTE, "êÊéËê¨ã‚" },
    { BLACK_BISHOP_PROMOTE, "êÊéËîn" },
    { BLACK_ROOK_PROMOTE,   "êÊéËó≥" },
    { WHITE_PAWN,    "å„éËï‡" },
    { WHITE_LANCE,   "å„éËçÅ" },
    { WHITE_KNIGHT,  "å„éËåj" },
    { WHITE_SILVER,  "å„éËã‚" },
    { WHITE_GOLD,    "å„éËã‡" },
    { WHITE_BISHOP,  "å„éËäp" },
    { WHITE_ROOK,    "å„éËîÚé‘" },
    { WHITE_KING,    "å„éËã " },
    { WHITE_PAWN_PROMOTE,   "å„éËÇ∆" },
    { WHITE_LANCE_PROMOTE,  "å„éËê¨çÅ" },
    { WHITE_KNIGHT_PROMOTE, "å„éËê¨åj" },
    { WHITE_SILVER_PROMOTE, "å„éËê¨ã‚" },
    { WHITE_BISHOP_PROMOTE, "å„éËîn" },
    { WHITE_ROOK_PROMOTE,   "å„éËó≥" },
};

std::unordered_map<int, std::string> PieceToSfenStr = {
    { EMPTY,  "  " },
    { PAWN,   "P" },
    { LANCE,  "L" },
    { KNIGHT, "N" },
    { SILVER, "S" },
    { GOLD,   "G" },
    { BISHOP, "B" },
    { ROOK,   "R" },
    { BLACK_PAWN,    " P" },
    { BLACK_LANCE,   " L" },
    { BLACK_KNIGHT,  " N" },
    { BLACK_SILVER,  " S" },
    { BLACK_GOLD,    " G" },
    { BLACK_BISHOP,  " B" },
    { BLACK_ROOK,    " R" },
    { BLACK_KING,    " K" },
    { BLACK_PAWN_PROMOTE,   "+P" },
    { BLACK_LANCE_PROMOTE,  "+L" },
    { BLACK_KNIGHT_PROMOTE, "+N" },
    { BLACK_SILVER_PROMOTE, "+S" },
    { BLACK_BISHOP_PROMOTE, "+B" },
    { BLACK_ROOK_PROMOTE,   "+R" },
    { WHITE_PAWN,    " p" },
    { WHITE_LANCE,   " l" },
    { WHITE_KNIGHT,  " n" },
    { WHITE_SILVER,  " s" },
    { WHITE_GOLD,    " g" },
    { WHITE_BISHOP,  " b" },
    { WHITE_ROOK,    " r" },
    { WHITE_KING,    " k" },
    { WHITE_PAWN_PROMOTE,   "+p" },
    { WHITE_LANCE_PROMOTE,  "+l" },
    { WHITE_KNIGHT_PROMOTE, "+n" },
    { WHITE_SILVER_PROMOTE, "+s" },
    { WHITE_BISHOP_PROMOTE, "+b" },
    { WHITE_ROOK_PROMOTE,   "+r" },
};

const std::array<Piece, 28> PieceList{
    BLACK_PAWN,
    BLACK_LANCE,
    BLACK_KNIGHT,
    BLACK_SILVER,
    BLACK_GOLD,
    BLACK_BISHOP,
    BLACK_ROOK,
    BLACK_KING,
    BLACK_PAWN_PROMOTE,
    BLACK_LANCE_PROMOTE,
    BLACK_KNIGHT_PROMOTE,
    BLACK_SILVER_PROMOTE,
    BLACK_BISHOP_PROMOTE,
    BLACK_ROOK_PROMOTE,
    WHITE_PAWN,
    WHITE_LANCE,
    WHITE_KNIGHT,
    WHITE_SILVER,
    WHITE_GOLD,
    WHITE_BISHOP,
    WHITE_ROOK,
    WHITE_KING,
    WHITE_PAWN_PROMOTE,
    WHITE_LANCE_PROMOTE,
    WHITE_KNIGHT_PROMOTE,
    WHITE_SILVER_PROMOTE,
    WHITE_BISHOP_PROMOTE,
    WHITE_ROOK_PROMOTE,
};

const std::array<std::array<Piece, 14>, 2> ColoredPieceList{ {
    {
        BLACK_PAWN,
        BLACK_LANCE,
        BLACK_KNIGHT,
        BLACK_SILVER,
        BLACK_GOLD,
        BLACK_BISHOP,
        BLACK_ROOK,
        BLACK_KING,
        BLACK_PAWN_PROMOTE,
        BLACK_LANCE_PROMOTE,
        BLACK_KNIGHT_PROMOTE,
        BLACK_SILVER_PROMOTE,
        BLACK_BISHOP_PROMOTE,
        BLACK_ROOK_PROMOTE
    },
    {
        WHITE_PAWN,
        WHITE_LANCE,
        WHITE_KNIGHT,
        WHITE_SILVER,
        WHITE_GOLD,
        WHITE_BISHOP,
        WHITE_ROOK,
        WHITE_KING,
        WHITE_PAWN_PROMOTE,
        WHITE_LANCE_PROMOTE,
        WHITE_KNIGHT_PROMOTE,
        WHITE_SILVER_PROMOTE,
        WHITE_BISHOP_PROMOTE,
        WHITE_ROOK_PROMOTE
    }
}};

const std::array<std::array<Piece, 3>, 2> ColoredJumpPieceList {{
    { BLACK_LANCE, BLACK_BISHOP, BLACK_ROOK },
    { WHITE_LANCE, WHITE_BISHOP, WHITE_ROOK }
}};

std::ostream& operator<<(std::ostream& os, const Piece piece) {
    os << PieceToStr[piece];
    return os;
}